import { Event, HybridManager, PropertyChangeEvent, RemoteEvent, Widget, WidgetEventMap } from '../../index';
export interface HybridEvent<TObject = object> extends RemoteEvent {
    id: string;
    eventType: string;
    data: TObject;
}
export interface HybridActionEvent<TObject = object, T = HybridManager> extends Event<T> {
    data: {
        id: string;
        eventType: string;
        data: TObject;
    };
}
export interface HybridActionEndEvent<TObject = object, T = HybridManager> extends Event<T> {
    data: TObject;
}
export interface HybridManagerWidgetAddEvent<TWidget = Widget, T = HybridManager> extends Event<T> {
    widget: TWidget;
}
export interface HybridManagerWidgetRemoveEvent<TWidget = Widget, T = HybridManager> extends Event<T> {
    widget: TWidget;
}
export interface HybridManagerEventMap extends WidgetEventMap {
    'hybridAction': HybridActionEvent;
    'hybridActionEnd': HybridActionEndEvent;
    'widgetAdd': HybridManagerWidgetAddEvent;
    'widgetRemove': HybridManagerWidgetRemoveEvent;
    'propertyChange:widgets': PropertyChangeEvent<Record<string, Widget>>;
}
//# sourceMappingURL=HybridManagerEventMap.d.ts.map