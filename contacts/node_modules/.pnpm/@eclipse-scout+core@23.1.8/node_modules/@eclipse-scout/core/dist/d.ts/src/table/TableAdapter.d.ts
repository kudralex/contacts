import { AdapterData, ChildModelOf, Column, Event, Filter, ModelAdapter, NumberColumn, ObjectOrModel, Table, TableAggregationFunctionChangedEvent, TableAppLinkActionEvent, TableCancelCellEditEvent, TableColumnBackgroundEffectChangedEvent, TableColumnMovedEvent, TableColumnOrganizeActionEvent, TableColumnResizedEvent, TableCompleteCellEditEvent, TableFilterAddedEvent, TableFilterRemovedEvent, TableGroupEvent, TableModel, TablePrepareCellEditEvent, TableReloadEvent, TableRow, TableRowActionEvent, TableRowClickEvent, TableRowModel, TableRowsCheckedEvent, TableRowsExpandedEvent, TableRowsSelectedEvent, TableSortEvent, TableUserFilter } from '../index';
export declare class TableAdapter extends ModelAdapter {
    widget: Table;
    /** @internal */
    _rebuildingTable: boolean;
    constructor();
    protected _initProperties(model: TableModel): void;
    /** @internal */
    _postCreateWidget(): void;
    protected _sendRowsSelected(rowIds: string[], debounceSend?: boolean): void;
    protected _sendRowClick(rowId: string, mouseButton: number, columnId: string): void;
    protected _onWidgetRowsSelected(event: TableRowsSelectedEvent): void;
    protected _onWidgetRowClick(event: TableRowClickEvent): void;
    protected _onWidgetFilterAdded(event: TableFilterAddedEvent): void;
    protected _onWidgetFilterRemoved(event: TableFilterRemovedEvent): void;
    protected _onWidgetColumnResized(event: TableColumnResizedEvent): void;
    protected _sendColumnResized(column: Column<any>): void;
    protected _onWidgetAggregationFunctionChanged(event: TableAggregationFunctionChangedEvent): void;
    protected _sendAggregationFunctionChanged(column: NumberColumn): void;
    protected _onWidgetColumnBackgroundEffectChanged(event: TableColumnBackgroundEffectChangedEvent): void;
    protected _sendColumnBackgroundEffectChanged(column: NumberColumn): void;
    protected _onWidgetColumnOrganizeAction(event: TableColumnOrganizeActionEvent): void;
    protected _onWidgetColumnMoved(event: TableColumnMovedEvent): void;
    protected _sendColumnMoved(column: Column<any>, index: number): void;
    protected _onWidgetPrepareCellEdit(event: TablePrepareCellEditEvent): void;
    protected _sendPrepareCellEdit(row: TableRow, column: Column<any>): void;
    protected _onWidgetCompleteCellEdit(event: TableCompleteCellEditEvent): void;
    protected _sendCompleteCellEdit(): void;
    protected _onWidgetCancelCellEdit(event: TableCancelCellEditEvent): void;
    protected _sendCancelCellEdit(): void;
    protected _onWidgetRowsChecked(event: TableRowsCheckedEvent): void;
    protected _sendRowsChecked(rows: TableRow[]): void;
    protected _onWidgetRowsExpanded(event: TableRowsExpandedEvent): void;
    protected _sendRowsExpanded(rows: TableRow[]): void;
    protected _onWidgetFilter(): void;
    protected _sendFilter(rowIds: string[]): void;
    protected _onWidgetSort(event: TableSortEvent): void;
    protected _onWidgetGroup(event: TableGroupEvent): void;
    protected _onWidgetRowAction(event: TableRowActionEvent): void;
    protected _sendRowAction(row: TableRow, column: Column<any>): void;
    protected _onWidgetAppLinkAction(event: TableAppLinkActionEvent): void;
    protected _sendAppLinkAction(column: Column<any>, ref: string): void;
    protected _sendContextColumn(contextColumn: Column<any>): void;
    protected _onWidgetReload(event: TableReloadEvent): void;
    protected _onWidgetExportToClipboard(event: Event<Table>): void;
    protected _onWidgetEvent(event: Event<Table>): void;
    protected _onRowsInserted(rows: ObjectOrModel<TableRow> | ObjectOrModel<TableRow>[]): void;
    protected _onRowsDeleted(rowIds: string[]): void;
    protected _onAllRowsDeleted(): void;
    protected _onRowsUpdated(rows: TableRow | TableRow[]): void;
    protected _onRowsSelected(rowIds: string[]): void;
    protected _onRowsChecked(rows: TableRowModel[]): void;
    protected _onRowsExpanded(rows: TableRowModel[]): void;
    protected _onRowOrderChanged(rowIds: string[]): void;
    protected _onColumnStructureChanged(columns: Column<any>[]): void;
    protected _onColumnOrderChanged(columnIds: string[]): void;
    protected _onColumnHeadersUpdated(columns: Column<any>[]): void;
    protected _onStartCellEdit(columnId: string, rowId: string, fieldId: string): void;
    protected _onEndCellEdit(fieldId: string): void;
    protected _onRequestFocus(): void;
    protected _onScrollToSelection(): void;
    protected _onColumnBackgroundEffectChanged(event: any): void;
    protected _onRequestFocusInCell(event: any): void;
    protected _onAggregationFunctionChanged(event: any): void;
    protected _onFiltersChanged(filters: (ObjectOrModel<TableUserFilter> | Filter<TableRow>)[]): void;
    onModelAction(event: any): void;
    exportAdapterData(adapterData: AdapterData): AdapterData;
    protected _initRowModel(rowModel?: TableRowModel): ChildModelOf<TableRow>;
    protected static _createRowRemote(rowModel: TableRowModel): TableRow;
    /**
     * Static method to modify the prototype of Table.
     */
    static modifyTablePrototype(): void;
    static modifyColumnPrototype(): void;
    static modifyBooleanColumnPrototype(): void;
}
//# sourceMappingURL=TableAdapter.d.ts.map