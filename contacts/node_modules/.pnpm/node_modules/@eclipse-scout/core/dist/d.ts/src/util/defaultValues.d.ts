export interface DefaultValuesBootstrapOptions {
    url?: string;
}
export declare const defaultValues: {
    /**
     * map of "objectType" -> { defaultValuesObject }
     * @internal
     */
    _defaults: {};
    /**
     * map of "objectType" -> [ "objectType", "parentObjectType", ..., "topLevelObjectType" ]
     * @internal
     */
    _objectTypeHierarchyFlat: {};
    bootstrap(options?: DefaultValuesBootstrapOptions): JQuery.Promise<any>;
    init(data: any): void;
    /** @internal */
    _generateObjectTypeHierarchyRec(json: any, currentParentObjectTypes: any, targetMap: any): void;
    /**
     * Applies the defaults for the given object type to the given object. Properties
     * are only set if they don't exist yet. The argument 'objectType' is optional
     * if the object has a property of the same name. If the object is an array,
     * the defaults are applied to each of the elements.
     */
    applyTo(object: Record<string, any> | Record<string, any>[], objectType?: string): void;
    /** @internal */
    _applyToInternal(object: Record<string, any>, objectType: string): void;
    /** @internal */
    _extendWithDefaults(object: Record<string, any>, defaults: Record<string, any>): void;
};
//# sourceMappingURL=defaultValues.d.ts.map