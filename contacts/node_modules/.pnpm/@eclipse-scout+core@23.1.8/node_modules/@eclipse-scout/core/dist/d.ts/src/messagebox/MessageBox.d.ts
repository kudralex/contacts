/// <reference types="jquery" />
import { Action, BoxButtons, DisplayParent, EnumObject, Event, GlassPaneRenderer, Icon, InitModelOf, KeyStrokeContext, MessageBoxEventMap, MessageBoxModel, StatusSeverity, Widget } from '../index';
import TriggeredEvent = JQuery.TriggeredEvent;
export type MessageBoxOption = EnumObject<typeof MessageBox.Buttons>;
export declare class MessageBox extends Widget implements MessageBoxModel {
    model: MessageBoxModel;
    eventMap: MessageBoxEventMap;
    self: MessageBox;
    severity: StatusSeverity;
    body: string;
    iconId: string;
    header: string;
    hiddenText: string;
    html: string;
    yesButtonText: string;
    noButtonText: string;
    cancelButtonText: string;
    buttons: Action[];
    boxButtons: BoxButtons;
    yesButton: Action;
    noButton: Action;
    cancelButton: Action;
    displayParent: DisplayParent;
    /** button to be executed when abort() is called, e.g. when ESCAPE is pressed. points to the last (most right) button in the list (one of yes, no or cancel) */
    abortButton: Action;
    $content: JQuery;
    $header: JQuery;
    $body: JQuery;
    $html: JQuery;
    $hiddenText: JQuery;
    $buttons: JQuery;
    protected _icon: Icon;
    protected _glassPaneRenderer: GlassPaneRenderer;
    constructor();
    static Buttons: {
        readonly YES: "yes";
        readonly NO: "no";
        readonly CANCEL: "cancel";
    };
    protected _init(model: InitModelOf<this>): void;
    protected _createKeyStrokeContext(): KeyStrokeContext;
    protected _initKeyStrokeContext(): void;
    protected _createMessageBoxButton(text: string, option: MessageBoxOption): Action;
    protected _render(): void;
    get$Scrollable(): JQuery;
    protected _postRender(): void;
    protected _remove(): void;
    protected _installFocusContext(): void;
    protected _uninstallFocusContext(): void;
    protected _renderIconId(): void;
    protected _renderSeverity(): void;
    protected _renderHeader(): void;
    protected _renderBody(): void;
    protected _renderHtml(): void;
    protected _renderHiddenText(): void;
    protected _onMouseDown(): void;
    protected _setCopyable(copyable: boolean): void;
    copy(): void;
    protected _onCopy(event: TriggeredEvent): void;
    protected _onButtonClick(event: Event<Action>, option: MessageBoxOption): void;
    setDisplayParent(displayParent: DisplayParent): void;
    protected _setDisplayParent(displayParent: DisplayParent): void;
    setIconId(iconId: string): void;
    protected _setIconId(iconId: string): void;
    /**
     * Renders the message box and links it with the display parent.
     */
    open(): void;
    /**
     * Destroys the message box and unlinks it from the display parent.
     */
    close(): void;
    /**
     * Aborts the message box by using the default abort button. Used by the ESC key stroke.
     */
    abort(): void;
    protected _attach(): void;
    protected _detach(): void;
}
//# sourceMappingURL=MessageBox.d.ts.map