import { CompactTree, InitModelOf, ModelAdapter, RemoteEvent, Session, Tree, TreeAdapter, TreeModel, TreeNode, TreeNodeModel, Widget } from '../../index';
import { SpecTree, SpecTreeAdapter } from '../index';
export declare class TreeSpecHelper {
    session: Session;
    constructor(session: Session);
    createModel(nodes: TreeNodeModel[]): TreeModel & {
        id: string;
        objectType: string;
        parent: Widget;
        session: Session;
    };
    createModelFixture(nodeCount?: number, depth?: number, expanded?: boolean): TreeModel & {
        id: string;
        objectType: string;
        parent: Widget;
        session: Session;
    };
    createModelNode(id?: string, text?: string, position?: number, model?: TreeNodeModel): TreeNodeModel;
    createModelNodes(nodeCount?: number, depth?: number, model?: TreeNodeModel): TreeNodeModel[];
    createModelNodesInternal(nodeCount: number, depth?: number, parentNode?: TreeNodeModel, model?: TreeNodeModel): TreeNodeModel[];
    createTree(model: TreeModel): SpecTree;
    createTreeAdapter(model: InitModelOf<ModelAdapter> | TreeModel & {
        session: Session;
        id: string;
        objectType: string;
    }): SpecTreeAdapter;
    createCompactTree(model: InitModelOf<Tree>): CompactTree & SpecTree;
    createCompactTreeAdapter(model: InitModelOf<TreeAdapter>): TreeAdapter;
    findAllNodes(tree: Tree): JQuery;
    createNodeExpandedEvent(model: {
        id: string;
    }, nodeId: string, expanded: boolean): RemoteEvent;
    selectNodesAndAssert(tree: Tree, nodes: TreeNode[]): void;
    assertSelection(tree: Tree, nodes: TreeNode[]): void;
    createNodesSelectedEvent(model: {
        id: string;
    }, nodeIds: string[]): RemoteEvent;
    createNodesInsertedEvent(model: {
        id: string;
    }, nodes: TreeNodeModel[], commonParentNodeId: string): RemoteEvent;
    createNodesInsertedEventTopNode(model: {
        id: string;
    }, nodes: TreeNodeModel[]): RemoteEvent;
    createNodesDeletedEvent(model: {
        id: string;
    }, nodeIds: string[], commonParentNodeId: string): RemoteEvent;
    createAllChildNodesDeletedEvent(model: {
        id: string;
    }, commonParentNodeId?: string): RemoteEvent;
    createNodeChangedEvent(model: {
        id: string;
    }, nodeId: string): RemoteEvent;
    createNodesUpdatedEvent(model: {
        id: string;
    }, nodes: TreeNodeModel[]): RemoteEvent;
    createChildNodeOrderChangedEvent(model: {
        id: string;
    }, childNodeIds: string[], parentNodeId: string): RemoteEvent;
    createTreeEnabledEvent(model: {
        id: string;
    }, enabled: boolean): RemoteEvent;
}
//# sourceMappingURL=TreeSpecHelper.d.ts.map