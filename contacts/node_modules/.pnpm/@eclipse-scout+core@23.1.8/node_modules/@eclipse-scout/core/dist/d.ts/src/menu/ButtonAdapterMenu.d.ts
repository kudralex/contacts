import { Button, ButtonAdapterMenuModel, ButtonModel, Event, EventHandler, GridData, InitModelOf, Menu, MenuBar, PropertyChangeEvent, SomeRequired } from '../index';
export declare class ButtonAdapterMenu extends Menu implements ButtonAdapterMenuModel {
    model: ButtonAdapterMenuModel;
    initModel: SomeRequired<this['model'], 'button' | 'parent'>;
    button: Button;
    menubar: MenuBar;
    protected _buttonPropertyChangeHandler: EventHandler<PropertyChangeEvent>;
    protected _buttonDestroyHandler: EventHandler<Event<Button>>;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    protected _destroy(): void;
    protected _installListeners(): void;
    protected _uninstallListeners(): void;
    protected _render(): void;
    protected _onButtonPropertyChange(event: PropertyChangeEvent): void;
    protected _onButtonDestroy(event: Event<Button>): void;
    doAction(): boolean;
    focus(): boolean;
    static adaptButtonProperties(buttonProperties: ButtonModel & {
        gridData?: GridData;
    }, menuProperties?: InitModelOf<ButtonAdapterMenu>): InitModelOf<ButtonAdapterMenu>;
}
//# sourceMappingURL=ButtonAdapterMenu.d.ts.map