import { Event, EventHandler, Form, FormField, InitModelOf, ObjectOrChildModel, WrappedFormFieldEventMap, WrappedFormFieldModel } from '../../../index';
export declare class WrappedFormField extends FormField implements WrappedFormFieldModel {
    model: WrappedFormFieldModel;
    eventMap: WrappedFormFieldEventMap;
    self: WrappedFormField;
    innerForm: Form;
    initialFocusEnabled: boolean;
    protected _formDestroyHandler: EventHandler<Event<Form>>;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    protected _render(): void;
    protected _renderProperties(): void;
    setInnerForm(innerForm: ObjectOrChildModel<Form>): void;
    protected _setInnerForm(innerForm: Form): void;
    /**
     * Will also be called by model adapter on property change event
     */
    protected _renderInnerForm(): void;
    protected _removeInnerForm(): void;
    protected _onInnerFormDestroy(event: Event<Form>): void;
    protected _renderInitialFocusEnabled(): void;
}
//# sourceMappingURL=WrappedFormField.d.ts.map