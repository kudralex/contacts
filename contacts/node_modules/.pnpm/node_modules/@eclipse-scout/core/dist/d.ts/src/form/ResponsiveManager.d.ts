import { EnumObject, ResponsiveHandler } from '../index';
export type ResponsiveState = EnumObject<typeof ResponsiveManager.ResponsiveState>;
export declare class ResponsiveManager {
    active: boolean;
    globalState: ResponsiveState;
    protected _responsiveHandlers: ResponsiveHandler[];
    constructor();
    static ResponsiveState: {
        readonly NORMAL: "normal";
        readonly CONDENSED: "condensed";
        readonly COMPACT: "compact";
    };
    init(): void;
    destroy(): void;
    /**
     * Sets the responsive manager to active or inactive globally. Default is active.
     */
    setActive(active: boolean): void;
    /**
     * Set a global responsive state. This state will always be set. Resizing will no longer result in a different responsive state.
     */
    setGlobalState(globalState: ResponsiveState): void;
    /**
     * Checks if the form is smaller than the preferred width of the form. If this is reached, the fields will
     * be transformed to ensure better readability.
     */
    handleResponsive(target: {
        responsiveHandler?: ResponsiveHandler;
    }, width: number): boolean;
    reset(target: {
        responsiveHandler?: ResponsiveHandler;
    }, force?: boolean): void;
    registerHandler(target: {
        responsiveHandler?: ResponsiveHandler;
    }, handler: ResponsiveHandler): void;
    unregisterHandler(target: {
        responsiveHandler?: ResponsiveHandler;
    }): void;
    static get(): ResponsiveManager;
}
//# sourceMappingURL=ResponsiveManager.d.ts.map