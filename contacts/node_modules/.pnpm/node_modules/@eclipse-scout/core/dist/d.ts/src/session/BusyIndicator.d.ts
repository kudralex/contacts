import { Action, BoxButtons, BusyIndicatorEventMap, Event, GlassPaneRenderer, InitModelOf, KeyStrokeContext, Widget, WidgetModel } from '../index';
export interface BusyIndicatorModel extends WidgetModel {
    cancellable?: boolean;
    showTimeout?: number;
    label?: string;
    details?: string;
}
export declare class BusyIndicator extends Widget implements BusyIndicatorModel {
    model: BusyIndicatorModel;
    eventMap: BusyIndicatorEventMap;
    self: BusyIndicator;
    cancellable: boolean;
    showTimeout: number;
    label: string;
    details: string;
    cancelButton: Action;
    boxButtons: BoxButtons;
    protected _glassPaneRenderer: GlassPaneRenderer;
    $content: JQuery;
    $buttons: JQuery;
    $label: JQuery;
    $details: JQuery;
    protected _busyIndicatorTimeoutId: number;
    constructor();
    protected _createKeyStrokeContext(): KeyStrokeContext;
    protected _initKeyStrokeContext(): void;
    protected _init(model: InitModelOf<this>): void;
    render($parent?: JQuery): void;
    protected _render(): void;
    protected _postRender(): void;
    protected _remove(): void;
    setLabel(label: string): void;
    protected _renderLabel(): void;
    setDetails(details: string): void;
    protected _renderDetails(): void;
    protected _position(): void;
    /**
     * Used by CloseKeyStroke.js
     */
    close(): void;
    protected _onCancelClick(event: Event): void;
    /**
     * Sets the busy indicator into cancelled state.
     */
    cancelled(): void;
}
//# sourceMappingURL=BusyIndicator.d.ts.map