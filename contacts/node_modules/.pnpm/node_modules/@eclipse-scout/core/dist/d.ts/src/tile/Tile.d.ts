import { ColorScheme, EnumObject, GridData, InitModelOf, LoadingSupport, TileEventMap, TileModel, Widget } from '../index';
export type TileDisplayStyle = EnumObject<typeof Tile.DisplayStyle>;
export declare class Tile extends Widget implements TileModel {
    model: TileModel;
    eventMap: TileEventMap;
    self: Tile;
    colorScheme: ColorScheme;
    displayStyle: TileDisplayStyle;
    filterAccepted: boolean;
    gridData: GridData;
    gridDataHints: GridData;
    rowId: string;
    selected: boolean;
    selectable: boolean;
    plainText: string;
    constructor();
    static DisplayStyle: {
        DEFAULT: string;
        PLAIN: string;
    };
    protected _createLoadingSupport(): LoadingSupport;
    protected _init(model: InitModelOf<this>): void;
    protected _render(): void;
    protected _renderProperties(): void;
    protected _postRender(): void;
    protected _renderDisplayStyle(): void;
    /** @see TileModel.gridDataHints */
    setGridDataHints(gridData: GridData): void;
    protected _setGridDataHints(gridData: GridData): void;
    /** @see TileModel.colorScheme */
    setColorScheme(colorScheme: ColorScheme | string): void;
    protected _setColorScheme(colorScheme: ColorScheme | string): void;
    protected _renderColorScheme(): void;
    /** @see TileModel.selected */
    setSelected(selected: boolean): void;
    protected _renderSelected(): void;
    /** @see TileModel.selectable */
    setSelectable(selectable: boolean): void;
    protected _setSelectable(selectable: boolean): void;
    protected _renderSelectable(): void;
    setFilterAccepted(filterAccepted: boolean): void;
    protected _renderFilterAccepted(): void;
    /** @internal */
    _renderVisible(): void;
    isVisible(): boolean;
}
//# sourceMappingURL=Tile.d.ts.map