import { EventHandler, InitModelOf, ObjectOrChildModel, PropertyChangeEvent, Tile, TileEventMap, TileModel, Widget } from '../index';
export interface WidgetTileModel extends TileModel {
    /** The widget that should be embedded in the tile */
    tileWidget?: ObjectOrChildModel<Widget>;
}
export interface WidgetTileEventMap extends TileEventMap {
    'propertyChange:tileWidget': PropertyChangeEvent<Widget, WidgetTile>;
}
/**
 * A tile containing a widget.
 */
export declare class WidgetTile extends Tile implements WidgetTileModel {
    model: WidgetTileModel;
    eventMap: WidgetTileEventMap;
    self: WidgetTile;
    tileWidget: Widget;
    protected _widgetPropertyChangeHandler: EventHandler<PropertyChangeEvent<any, Widget>>;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    protected _destroy(): void;
    protected _renderProperties(): void;
    protected _renderTileWidget(): void;
    protected _removeTileWidget(): void;
    protected _onWidgetPropertyChange(event: PropertyChangeEvent): void;
    protected _setTileWidget(tileWidget: Widget): void;
}
//# sourceMappingURL=WidgetTile.d.ts.map