/// <reference types="jquery" />
import { BasicField, Calculator, DecimalFormat, DecimalFormatOptions, InitModelOf, KeyStrokeContext, Locale, NumberFieldEventMap, NumberFieldModel } from '../../../index';
export declare class NumberField extends BasicField<number, number | string> implements NumberFieldModel {
    model: NumberFieldModel;
    eventMap: NumberFieldEventMap;
    self: NumberField;
    calc: Calculator;
    minValue: number;
    maxValue: number;
    decimalFormat: DecimalFormat;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    /**
     * Initializes the decimal format before calling set value.
     * This cannot be done in _init because the value field would call _setValue first
     */
    protected _initValue(value: number): void;
    protected _createKeyStrokeContext(): KeyStrokeContext;
    protected _render(): void;
    protected _renderGridData(): void;
    protected _renderGridDataHints(): void;
    protected _getDefaultFormat(locale: Locale): string | DecimalFormat;
    setDecimalFormat(decimalFormat: string | DecimalFormat | DecimalFormatOptions): void;
    protected _setDecimalFormat(decimalFormat: string | DecimalFormat | DecimalFormatOptions): void;
    protected _parseValue(displayText: string): number;
    protected _evaluateNumber(normalizedNumberString: string): number;
    protected _ensureValue(value: number | string): number;
    protected _validateValue(value: number): number;
    protected _onNumberTooLarge(): void;
    protected _onNumberTooSmall(): void;
    protected _formatValue(value: number): string | JQuery.Promise<string>;
    /**
     * Set the minimum value. Value <code>null</code> means no limitation.
     * <p>
     * If the new minimum value is bigger than the current maxValue, the current maximum value is changed to the new minimum value.
     */
    setMinValue(minValue: number): void;
    protected _setMinValue(minValue: number): void;
    /**
     * Set the maximum value. Value <code>null</code> means no limitation.
     * <p>
     * If the new maximum value is smaller than the current minValue, the current minimum value is changed to the new maximum value.
     */
    setMaxValue(maxValue: number): void;
    protected _setMaxValue(maxValue: number): void;
}
//# sourceMappingURL=NumberField.d.ts.map