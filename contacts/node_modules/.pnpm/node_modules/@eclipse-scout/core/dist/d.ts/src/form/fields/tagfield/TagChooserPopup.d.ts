/// <reference types="jquery" />
import { AbstractLayout, InitModelOf, LookupResult, Popup, ScoutKeyboardEvent, SomeRequired, Table, TableRow, TableRowClickEvent, TagChooserPopupEventMap, TagChooserPopupModel, TagField } from '../../../index';
export declare class TagChooserPopup extends Popup implements TagChooserPopupModel {
    model: TagChooserPopupModel;
    initModel: SomeRequired<this['model'], 'parent' | 'field'>;
    eventMap: TagChooserPopupEventMap;
    self: TagChooserPopup;
    table: Table;
    field: TagField;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    protected _createLayout(): AbstractLayout;
    protected _render(): void;
    protected _renderTable(): void;
    setLookupResult(result: LookupResult<string>): void;
    protected _onRowClick(event: TableRowClickEvent): void;
    /**
     * This event handler is called before the mousedown handler on the _document_ is triggered
     * This allows us to prevent the default, which is important for the CellEditorPopup which
     * should stay open when the SmartField popup is closed. It also prevents the focus blur
     * event on the SmartField input-field.
     */
    protected _onContainerMouseDown(event: JQuery.MouseDownEvent): boolean;
    protected _isMouseDownOnAnchor(event: MouseEvent): boolean;
    delegateKeyEvent(event: JQuery.KeyDownEvent & ScoutKeyboardEvent): void;
    triggerLookupRowSelected(row?: TableRow): void;
    selectedRow(): TableRow;
}
//# sourceMappingURL=TagChooserPopup.d.ts.map