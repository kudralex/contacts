import { EventEmitter, Filter, InitModelOf, ObjectWithType, Session, SomeRequired, Table, TableRow, TableUserFilterModel } from '../../index';
export declare abstract class TableUserFilter extends EventEmitter implements Filter<TableRow>, TableUserFilterModel, ObjectWithType {
    model: TableUserFilterModel;
    initModel: SomeRequired<this['model'], 'session' | 'table'>;
    objectType: string;
    session: Session;
    table: Table;
    filterType: string;
    constructor();
    init(model: InitModelOf<this>): void;
    protected _init(model: InitModelOf<this>): void;
    createFilterAddedEventData(): TableUserFilterAddedEventData;
    createFilterRemovedEventData(): TableUserFilterRemovedEventData;
    createKey(): string;
    abstract createLabel(): string;
    abstract accept(row: TableRow): boolean;
    equals(filter: Filter<TableRow>): boolean;
}
export interface TableUserFilterAddedEventData {
    filterType: string;
    columnId?: string;
    selectedValues?: (string | number)[];
    text?: string;
    freeText?: string;
    dateFrom?: string;
    dateTo?: string;
    numberFrom?: number;
    numberTo?: number;
}
export interface TableUserFilterRemovedEventData {
    filterType: string;
    columnId?: string;
}
//# sourceMappingURL=TableUserFilter.d.ts.map