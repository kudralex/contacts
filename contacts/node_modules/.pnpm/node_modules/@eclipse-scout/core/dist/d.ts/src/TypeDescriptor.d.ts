export interface ObjectTypePart {
    name: string;
    namespaces?: string[];
}
export interface TypeDescriptorOptions {
    /**
     * Controls if the type may be resolved without the model variant part if the initial objectType could not be resolved. Default is false.
     */
    variantLenient?: boolean;
}
/**
 * This class contains a structured type description for a Scout class.
 */
export declare class TypeDescriptor {
    typeDescriptor: string;
    objectType: ObjectTypePart;
    modelVariant: ObjectTypePart;
    className: string;
    namespaces: string[];
    /**
     * @param typeDescriptor a string in the format '[namespace(s).]objectType[[:namespace(s).]modelVariant]'
     */
    constructor(typeDescriptor: string, objectType: ObjectTypePart, modelVariant?: ObjectTypePart);
    resolve(options?: TypeDescriptorOptions): new () => object;
    error(details: string): Error;
    notFoundError(): Error;
    static resolveType(typeDescriptor: string, options?: TypeDescriptorOptions): new () => object;
    static parse(typeDescriptor: string): TypeDescriptor;
}
//# sourceMappingURL=TypeDescriptor.d.ts.map