/// <reference types="jquery" />
import { AbstractLayout, ActionEventMap, ActionKeyStroke, ActionModel, Alignment, DoubleClickSupport, EnumObject, Icon, InitModelOf, KeyStrokeContext, TooltipPosition, TooltipSupport, Widget } from '../index';
export type ActionStyle = EnumObject<typeof Action.ActionStyle>;
export type KeyStrokeFirePolicy = EnumObject<typeof Action.KeyStrokeFirePolicy>;
export type ActionTextPosition = EnumObject<typeof Action.TextPosition>;
export declare class Action extends Widget implements ActionModel {
    model: ActionModel;
    eventMap: ActionEventMap;
    self: Action;
    actionStyle: ActionStyle;
    compact: boolean;
    compactOrig: boolean;
    iconId: string;
    horizontalAlignment: Alignment;
    keyStroke: string;
    keyStrokeFirePolicy: KeyStrokeFirePolicy;
    selected: boolean;
    preventDoubleClick: boolean;
    tabbable: boolean;
    actionKeyStroke: ActionKeyStroke;
    text: string;
    textPosition: ActionTextPosition;
    htmlEnabled: boolean;
    textVisible: boolean;
    textVisibleOrig: boolean;
    toggleAction: boolean;
    tooltipText: string;
    showTooltipWhenSelected: boolean;
    tooltipPosition: TooltipPosition;
    icon: Icon;
    $text: JQuery;
    protected _doubleClickSupport: DoubleClickSupport;
    constructor();
    static ActionStyle: {
        /**
         * Regular look, also used in overflow menus.
         */
        readonly DEFAULT: 0;
        /**
         * Action looks like a button.
         */
        readonly BUTTON: 1;
    };
    static TextPosition: {
        readonly DEFAULT: "default";
        /**
         * The text will be positioned below the icon. It has no effect if no icon is set.
         */
        readonly BOTTOM: "bottom";
    };
    static KeyStrokeFirePolicy: {
        readonly ACCESSIBLE_ONLY: 0;
        readonly ALWAYS: 1;
    };
    protected _createKeyStrokeContext(): KeyStrokeContext;
    protected _init(model: InitModelOf<this>): void;
    protected _render(): void;
    protected _createLayout(): AbstractLayout;
    protected _renderProperties(): void;
    protected _remove(): void;
    /** @see ActionModel.actionStyle */
    setActionStyle(actionStyle: ActionStyle): void;
    /** @see ActionModel.text */
    setText(text: string): void;
    protected _renderText(): void;
    protected _removeText(): void;
    /** @see ActionModel.textPosition */
    setTextPosition(textPosition: ActionTextPosition): void;
    protected _renderTextPosition(): void;
    /** @see ActionModel.htmlEnabled */
    setHtmlEnabled(htmlEnabled: boolean): void;
    protected _renderHtmlEnabled(): void;
    /** @see ActionModel.iconId */
    setIconId(iconId: string): void;
    protected _renderIconId(): void;
    get$Icon(): JQuery;
    protected _removeIconId(): void;
    protected _renderEnabled(): void;
    /** @see ActionModel.tooltipText */
    setTooltipText(tooltipText: string): void;
    protected _renderTooltipText(): void;
    /**
     * Installs or uninstalls tooltip based on tooltipText, selected and enabledComputed.
     */
    protected _updateTooltip(): void;
    protected _shouldInstallTooltip(): boolean;
    /** @see ActionModel.tabbable */
    setTabbable(tabbable: boolean): void;
    protected _renderTabbable(): void;
    /** @see ActionModel.compact */
    setCompact(compact: boolean): void;
    protected _renderCompact(): void;
    /** @see ActionModel.tooltipPosition */
    setTooltipPosition(position: TooltipPosition): void;
    protected _configureTooltip(): InitModelOf<TooltipSupport>;
    /**
     * @returns true if the action has been performed or false if it has not been performed (e.g. when the button is not enabledComputed).
     */
    doAction(): boolean;
    toggle(): void;
    /** @see ActionModel.toggleAction */
    setToggleAction(toggleAction: boolean): void;
    isToggleAction(): boolean;
    /**
     * @returns true if the action may be executed, false if it should be ignored.
     */
    prepareDoAction(): boolean;
    protected _doAction(): void;
    /** @see ActionModel.selected */
    setSelected(selected: boolean): void;
    protected _renderSelected(): void;
    /** @see ActionModel.keyStroke */
    setKeyStroke(keyStroke: string): void;
    protected _setKeyStroke(keyStroke: string): void;
    protected _renderKeyStroke(): void;
    /** @see ActionModel.textVisible */
    setTextVisible(textVisible: boolean): void;
    /** @see ActionModel.horizontalAlignment */
    setHorizontalAlignment(horizontalAlignment: Alignment): void;
    protected _createActionKeyStroke(): ActionKeyStroke;
    /** @see ActionModel.preventDoubleClick */
    setPreventDoubleClick(preventDoubleClick: boolean): void;
    protected _allowMouseEvent(event: JQuery.MouseEventBase): boolean;
    protected _onClick(event: JQuery.ClickEvent): void;
}
//# sourceMappingURL=Action.d.ts.map