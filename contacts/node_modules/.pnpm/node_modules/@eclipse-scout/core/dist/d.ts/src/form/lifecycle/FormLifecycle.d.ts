import { Form, FormLifecycleModel, InitModelOf, Lifecycle, Status, ValidationResult } from '../../index';
export declare class FormLifecycle<TValidationResult extends ValidationResult = ValidationResult> extends Lifecycle<TValidationResult> implements FormLifecycleModel {
    model: FormLifecycleModel;
    widget: Form;
    constructor();
    init(model: InitModelOf<this>): void;
    protected _reset(): void;
    invalidElements(): {
        missingElements: TValidationResult[];
        invalidElements: TValidationResult[];
    };
    protected _invalidElementText(element: TValidationResult): string;
    protected _missingElementText(element: TValidationResult): string;
    protected _validateWidget(): Status;
    protected _revealInvalidElement(invalidElement: TValidationResult): void;
    markAsSaved(): void;
    /**
     * Visits all form fields and calls the updateRequiresSave() function. If any
     * field has the requiresSave flag set to true, this function returns true,
     * false otherwise.
     *
     * @see (Java) AbstractFormField #checkSaveNeeded, #isSaveNeeded
     */
    requiresSave(): boolean;
}
//# sourceMappingURL=FormLifecycle.d.ts.map