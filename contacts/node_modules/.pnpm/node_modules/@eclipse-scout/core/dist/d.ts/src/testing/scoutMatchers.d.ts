/// <reference types="jasmine" />
import { RemoteEvent, Widget } from '../index';
import MatchersUtil = jasmine.MatchersUtil;
import CustomEqualityTester = jasmine.CustomEqualityTester;
import CustomMatcher = jasmine.CustomMatcher;
declare global {
    namespace jasmine {
        interface Matchers<T> {
            /**
             * Checks if the given remote request contains expected events, order does not matter.
             * Actual json request, may be obtained by {@link mostRecentJsonRequest}.
             */
            toContainEvents(events: RemoteEvent | RemoteEvent[]): void;
            /**
             * Checks if the given remote request contains all the expected events in the given order
             * Actual json request, may be obtained by {@link mostRecentJsonRequest}.
             */
            toContainEventsExactly(events: RemoteEvent | RemoteEvent[]): void;
            /**
             * Checks if the given remote request contains events with the expected event types in the given order
             * Actual json request, may be obtained by {@link mostRecentJsonRequest}.
             */
            toContainEventTypesExactly(events: string | string[]): void;
            /**
             * Checks if all given jQuery objects (array of jQuery objects) have a specific class.
             */
            allToHaveClass(cssClass: string): void;
            /**
             * Checks if any given jQuery object (array of jQuery objects) has a specific class.
             */
            anyToHaveClass(cssClass: string): void;
            /**
             * Checks if the given widget property was correctly cloned.
             */
            toHaveClonedWidgetProperty(original: Widget, property: string): void;
        }
    }
}
export declare const jasmineScoutMatchers: {
    toContainEvents: (util: MatchersUtil) => CustomMatcher;
    toContainEventsExactly: (util: MatchersUtil) => CustomMatcher;
    toContainEventTypesExactly: (util: MatchersUtil) => CustomMatcher;
    allToHaveClass: (util: MatchersUtil, customEqualityTesters?: ReadonlyArray<CustomEqualityTester>) => CustomMatcher;
    anyToHaveClass: (util: MatchersUtil, customEqualityTesters?: ReadonlyArray<CustomEqualityTester>) => CustomMatcher;
    toHaveClonedWidgetProperty: (util: MatchersUtil, customEqualityTesters?: ReadonlyArray<CustomEqualityTester>) => CustomMatcher;
};
//# sourceMappingURL=scoutMatchers.d.ts.map