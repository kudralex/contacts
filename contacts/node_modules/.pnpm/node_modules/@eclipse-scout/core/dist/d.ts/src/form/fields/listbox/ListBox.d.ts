import { InitModelOf, ListBoxLayout, ListBoxModel, LookupBox, LookupResult, LookupRow, Table, TableRowModel, TableRowsCheckedEvent, Widget } from '../../../index';
export declare class ListBox<TValue> extends LookupBox<TValue> implements ListBoxModel<TValue> {
    model: ListBoxModel<TValue>;
    table: Table;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    protected _initStructure(value: TValue[]): void;
    protected _render(): void;
    protected _createFieldContainerLayout(): ListBoxLayout;
    protected _renderStructure(): void;
    protected _onTableRowsChecked(event: TableRowsCheckedEvent): void;
    protected _syncTableToValue(): void;
    protected _valueChanged(): void;
    protected _syncValueToTable(newValue: TValue[]): void;
    protected _lookupByAllDone(result: LookupResult<TValue>): boolean;
    protected _populateTable(result: LookupResult<TValue>): void;
    /**
     * Returns a lookup row for each value currently checked.
     */
    getCheckedLookupRows(): LookupRow<TValue>[];
    protected _createTableRow(lookupRow: LookupRow<TValue>): TableRowModel;
    protected _createDefaultListBoxTable(): Table;
    getDelegateScrollable(): Widget;
}
//# sourceMappingURL=ListBox.d.ts.map