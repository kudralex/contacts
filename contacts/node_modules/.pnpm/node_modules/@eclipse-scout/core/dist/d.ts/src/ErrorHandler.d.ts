/// <reference types="jquery" />
import { InitModelOf, LogLevel, ObjectModel, ObjectWithType, Session } from './index';
export interface ErrorHandlerModel extends ObjectModel<ErrorHandler> {
    /**
     * Default is true
     */
    logError?: boolean;
    /**
     * Default is true
     */
    displayError?: boolean;
    /**
     * Default is false
     */
    sendError?: boolean;
    session?: Session;
}
export interface ErrorInfo {
    log: string;
    level?: LogLevel;
    error?: any;
    mappingError?: string;
    code?: string;
    message?: string;
    stack?: string;
    mappedStack?: string;
    debugInfo?: string;
}
export declare class ErrorHandler implements ErrorHandlerModel, ObjectWithType {
    model: ErrorHandlerModel;
    objectType: string;
    logError: boolean;
    displayError: boolean;
    sendError: boolean;
    session: Session;
    windowErrorHandler: OnErrorEventHandlerNonNull;
    constructor();
    /**
     * Use this constant to configure whether all instances of the ErrorHandler should write
     * to the console. When you've installed a console appender to log4javascript you can set the
     * value to false, because the ErrorHandler also calls $.log.error and thus the appender has
     * already written the message to the console. We don't want to see it twice.
     */
    static CONSOLE_OUTPUT: boolean;
    init(options?: InitModelOf<this>): void;
    protected _onWindowError(errorMessage: string, fileName?: string, lineNumber?: number, columnNumber?: number, error?: Error): void;
    protected _isIgnorableScriptError(message: string, fileName?: string, lineNumber?: number, columnNumber?: number, error?: Error): boolean;
    /**
     * Handles unexpected JavaScript errors. The arguments are first analyzed and then handled.
     *
     * This method may be called by passing the arguments individually or as an array (or array-like object)
     * in the first argument.
     * Examples:
     *   1. try { ... } catch (err) { handler.handle(err); }
     *   2. $.get().fail(function(jqXHR, textStatus, errorThrown) { handler.handle(jqXHR, textStatus, errorThrown); }
     *   3. $.get().fail(function(jqXHR, textStatus, errorThrown) { handler.handle(arguments); } // <-- recommended
     *
     * @param errorOrArgs error or array or array-like object containing the error and other arguments
     * @returns the analyzed errorInfo
     */
    handle(errorOrArgs: any | IArguments | any[], ...args: any[]): JQuery.Promise<any>;
    /**
     * Returns an "errorInfo" object for the given arguments. The following cases are handled:
     * 1. Error objects           (code: computed by getJsErrorCode())
     * 2. jQuery AJAX errors      (code: 'X' + HTTP status code)
     * 3. Nothing                 (code: 'P3')
     * 4. Everything else         (code: 'P4')
     */
    analyzeError(error?: any, ...args: any[]): JQuery.Promise<any>;
    protected _analyzeError(errorInfo: ErrorInfo, ...args: any[]): JQuery.Promise<ErrorInfo>;
    protected _analyzeRegularError(errorInfo: ErrorInfo): void;
    protected _analyzeAjaxError(errorInfo: ErrorInfo, ...args: any[]): void;
    protected _analyzeOtherError(errorInfo: ErrorInfo): void;
    protected _analyzeNoError(errorInfo: ErrorInfo): void;
    mapStack(stack: string): JQuery.Promise<string, {
        message: string;
        error: Error;
    }>;
    /**
     * Expects an object as returned by {@link analyzeError} and handles it:
     * - If the flag "logError" is set, the log message is printed to the console
     * - If there is a scout session and the flag "displayError" is set, the error is shown in a message box.
     * - If there is a scout session and the flag "sendError" is set, the error is sent to the UI server.
     */
    handleErrorInfo(errorInfo: ErrorInfo): ErrorInfo;
    protected _logErrorInfo(errorInfo: ErrorInfo): void;
    /**
     * Generate a "cool looking" error code from the JS error object, that
     * does not reveal too much technical information, but at least indicates
     * that a JS runtime error has occurred. (In contrast, fatal errors from
     * the server have numeric error codes.)
     */
    getJsErrorCode(error?: Error): string;
    protected _showMessageBox(session: Session, errorMessage: string, errorCode: string, logMessage: string): void;
    protected _sendErrorMessage(session: Session, logMessage: string, logLevel: LogLevel): void;
}
//# sourceMappingURL=ErrorHandler.d.ts.map