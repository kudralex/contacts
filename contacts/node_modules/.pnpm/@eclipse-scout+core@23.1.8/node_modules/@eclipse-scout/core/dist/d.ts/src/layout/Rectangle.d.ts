import { Dimension, Insets, Point } from '../index';
export declare class Rectangle {
    x: number;
    y: number;
    width: number;
    height: number;
    /**
     * If no parameters are passed, all members are initialized with 0.
     */
    constructor(xOrRectangle?: number | Rectangle, y?: number, width?: number, height?: number);
    toString(): string;
    equals(o: Rectangle): boolean;
    clone(): Rectangle;
    center(): Point;
    right(): number;
    bottom(): number;
    contains(x: number, y: number): boolean;
    /**
     * Tests whether the specified rectangle intersects this rectangle.
     * This means the two rectangles share at least one internal point.
     *
     * @param r the rectangle to test against
     * @returns true if the specified rectangle intersects this one
     */
    intersects(r: Rectangle): boolean;
    /**
     * Subtracts the given insets from the rectangle.
     */
    subtract(insets: Insets): Rectangle;
    /**
     * Subtracts the insets only from the dimension properties (width and height)
     */
    subtractFromDimension(insets: Insets): Rectangle;
    /**
     * Moves the rectangle the given distance.
     * <p>
     * @param dx the distance to move the rectangle along the x axis.
     * @param dy the distance to move the rectangle along the y axis.
     */
    translate(dx: number, dy: number): Rectangle;
    /**
     * @returns property x and y of this instance as new {@link Point} instance.
     */
    point(): Point;
    /**
     * @returns property width and height of this instance as new {@link Dimension} instance.
     */
    dimension(): Dimension;
    union(r: Rectangle): Rectangle;
    /**
     * Creates a copy and calls Math.floor() on each property.
     */
    floor(): Rectangle;
    /**
     * Creates a copy and calls Math.ceil() on each property.
     */
    ceil(): Rectangle;
}
//# sourceMappingURL=Rectangle.d.ts.map