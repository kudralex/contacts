import { Code, CodeTypeModel, FullModelOf, InitModelOf, ObjectOrModel, ObjectWithType, TreeVisitor, TreeVisitResult } from '../index';
export declare class CodeType<TCodeId> implements ObjectWithType {
    model: CodeTypeModel<TCodeId>;
    objectType: string;
    id: string;
    modelClass: string;
    codes: Code<TCodeId>[];
    codeMap: Record<string, Code<TCodeId>>;
    constructor();
    init(model: InitModelOf<this>): void;
    protected _initCode(modelCode: FullModelOf<Code<TCodeId>>, parent?: Code<TCodeId>): void;
    add(code: Code<TCodeId>, parent?: Code<TCodeId>): void;
    /**
     * @throw Error if code does not exist
     */
    get(codeId: TCodeId): Code<TCodeId>;
    /**
     * Same as {@link get}, but does not throw an error if the code does not exist.
     *
     * @returns code for the given codeId or undefined if code does not exist
     */
    optGet(codeId: TCodeId): Code<TCodeId>;
    getCodes(rootOnly?: boolean): Code<TCodeId>[];
    /**
     * Visits all codes and their children.
     * <p>
     * In order to abort visiting, the visitor can return true or TreeVisitResult.TERMINATE.
     * To only abort the visiting of a subtree, the visitor can return SKIP_SUBTREE.
     * </p>
     */
    visitChildren(visitor: TreeVisitor<Code<TCodeId>>): boolean | TreeVisitResult;
    static ensure<TCodeId>(codeType: ObjectOrModel<CodeType<TCodeId>>): CodeType<TCodeId>;
}
//# sourceMappingURL=CodeType.d.ts.map